// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/hellokv2.proto

package hellokv2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hellokv2_Get_FullMethodName = "/hellokv2.Hellokv2/Get"
	Hellokv2_Set_FullMethodName = "/hellokv2.Hellokv2/Set"
)

// Hellokv2Client is the client API for Hellokv2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Hellokv2Client interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
}

type hellokv2Client struct {
	cc grpc.ClientConnInterface
}

func NewHellokv2Client(cc grpc.ClientConnInterface) Hellokv2Client {
	return &hellokv2Client{cc}
}

func (c *hellokv2Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Hellokv2_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellokv2Client) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, Hellokv2_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Hellokv2Server is the server API for Hellokv2 service.
// All implementations must embed UnimplementedHellokv2Server
// for forward compatibility
type Hellokv2Server interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	mustEmbedUnimplementedHellokv2Server()
}

// UnimplementedHellokv2Server must be embedded to have forward compatible implementations.
type UnimplementedHellokv2Server struct {
}

func (UnimplementedHellokv2Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHellokv2Server) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedHellokv2Server) mustEmbedUnimplementedHellokv2Server() {}

// UnsafeHellokv2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Hellokv2Server will
// result in compilation errors.
type UnsafeHellokv2Server interface {
	mustEmbedUnimplementedHellokv2Server()
}

func RegisterHellokv2Server(s grpc.ServiceRegistrar, srv Hellokv2Server) {
	s.RegisterService(&Hellokv2_ServiceDesc, srv)
}

func _Hellokv2_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Hellokv2Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hellokv2_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Hellokv2Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellokv2_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Hellokv2Server).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hellokv2_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Hellokv2Server).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hellokv2_ServiceDesc is the grpc.ServiceDesc for Hellokv2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hellokv2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hellokv2.Hellokv2",
	HandlerType: (*Hellokv2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Hellokv2_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Hellokv2_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hellokv2.proto",
}
