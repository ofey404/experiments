apiVersion: v1
kind: Namespace
metadata:
  name: request-visualizer
  labels:
    istio-injection: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: request-visualizer
  namespace: request-visualizer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: request-visualizer
  template:
    metadata:
      labels:
        app: request-visualizer
    spec:
      containers:
      - name: app
        image: python:3.10-slim-bullseye
        command:
        - python
        - -c
        - |
          #!/usr/bin/env python3
          """
          License: MIT License
          Copyright (c) 2023 Miel Donkers
          Very simple HTTP server in python for logging requests
          Usage::
              ./server.py [<port>]
          """
          from http.server import BaseHTTPRequestHandler, HTTPServer
          import logging

          class S(BaseHTTPRequestHandler):
              def _set_response(self):
                  self.send_response(200)
                  self.send_header('Content-type', 'text/html')
                  self.end_headers()

              def do_GET(self):
                  logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
                  self._set_response()
                  self.wfile.write("GET request for {}".format(self.path).encode('utf-8'))

              def do_POST(self):
                  content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
                  post_data = self.rfile.read(content_length) # <--- Gets the data itself
                  logging.info("POST request,\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n",
                          str(self.path), str(self.headers), post_data.decode('utf-8'))

                  self._set_response()
                  self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))

          def run(server_class=HTTPServer, handler_class=S, port=8080):
              logging.basicConfig(level=logging.INFO)
              server_address = ('', port)
              httpd = server_class(server_address, handler_class)
              logging.info('Starting httpd...\n')
              try:
                  httpd.serve_forever()
              except KeyboardInterrupt:
                  pass
              httpd.server_close()
              logging.info('Stopping httpd...\n')
          run(port=80)
        imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: request-visualizer
  namespace: request-visualizer
spec:
  ports:
  - port: 80
    targetPort: 80
    name: http
  selector:
    app: request-visualizer
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: request-visualizer
  namespace: request-visualizer
spec:
  hosts:
  - "*"
  gateways:
  - request-visualizer/request-visualizer-gateway
  http:
  - match:
    - uri:
        prefix: /request-visualizer
    rewrite:
      uri: /
    route:
    - destination:
        port:
          number: 80
        host: request-visualizer
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: request-visualizer
  namespace: request-visualizer
spec:
  action: ALLOW
  selector:
    matchLabels:
      app: request-visualizer
  rules:
  - {}
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: request-visualizer-gateway
  namespace: request-visualizer
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP