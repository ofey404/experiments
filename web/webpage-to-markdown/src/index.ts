#!/usr/bin/env node
// NOTE: You can remove the first line if you don't plan to release an
// executable package. E.g. code that can be used as cli like prettier or eslint

import { Readability } from "@mozilla/readability";
import { JSDOM } from "jsdom";

function basic() {
  var doc = new JSDOM("<body>Look at this cat: <img src='./cat.jpg'></body>", {
    url: "https://www.example.com/the-page-i-got-the-source-from"
  });
  var article = new Readability(doc.window.document).parse();
  console.log(article)
}
// {
//   title: '',
//   byline: null,
//   dir: null,
//   lang: null,
//   content: '<div id="readability-page-1" class="page">Look at this cat: <img src="https://www.example.com/cat.jpg"></div>',
//   textContent: 'Look at this cat: ',
//   length: 18,
//   excerpt: undefined,
//   siteName: null,
//   publishedTime: null
// }

// Data output from https://extractorapi.com/api/v1/extractor/?apikey=577be8f8186ed4c4c4d06425828c3b5d898120b1&url=https://paulgraham.com/hp.html
function complex() {
  const blogHtml = "<html><head><title>Hackers and Painters</title><!-- <META NAME=\"ROBOTS\" CONTENT=\"NOODP\"> -->\n<link rel=\"shortcut icon\" href=\"http://ycombinator.com/arc/arc.png\">\n</head><body bgcolor=\"#ffffff\" background=\"https://s.turbifycdn.com/aah/paulgraham/essays-4.gif\" text=\"#000000\" link=\"#000099\" vlink=\"#464646\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr valign=\"top\"><td><map name=1717c64a02ebc321><area shape=rect coords=\"0,0,67,21\" href=\"index.html\"><area shape=rect coords=\"0,21,67,42\" href=\"articles.html\"><area shape=rect coords=\"0,42,67,63\" href=\"http://www.amazon.com/gp/product/0596006624\"><area shape=rect coords=\"0,63,67,84\" href=\"books.html\"><area shape=rect coords=\"0,84,67,105\" href=\"http://ycombinator.com\"><area shape=rect coords=\"0,105,67,126\" href=\"arc.html\"><area shape=rect coords=\"0,126,67,147\" href=\"bel.html\"><area shape=rect coords=\"0,147,67,168\" href=\"lisp.html\"><area shape=rect coords=\"0,168,67,189\" href=\"antispam.html\"><area shape=rect coords=\"0,189,67,210\" href=\"kedrosky.html\"><area shape=rect coords=\"0,210,67,231\" href=\"faq.html\"><area shape=rect coords=\"0,231,67,252\" href=\"raq.html\"><area shape=rect coords=\"0,252,67,273\" href=\"quo.html\"><area shape=rect coords=\"0,273,67,294\" href=\"rss.html\"><area shape=rect coords=\"0,294,67,315\" href=\"bio.html\"><area shape=rect coords=\"0,315,67,336\" href=\"https://twitter.com/paulg\"><area shape=rect coords=\"0,336,67,357\" href=\"https://mas.to/@paulg\"></map><img src=\"https://s.turbifycdn.com/aah/paulgraham/essays-5.gif\" width=\"69\" height=\"357\" usemap=#1717c64a02ebc321 border=\"0\" hspace=\"0\" vspace=\"0\" ismap /></td><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"26\" border=\"0\" /></td><td><a href=\"index.html\"><img src=\"https://s.turbifycdn.com/aah/paulgraham/essays-6.gif\" width=\"410\" height=\"45\" border=\"0\" hspace=\"0\" vspace=\"0\" /></a><br /><br /><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"435\"><tr valign=\"top\"><td width=\"435\"><img src=\"https://s.turbifycdn.com/aah/paulgraham/hackers-and-painters-2.gif\" width=\"175\" height=\"18\" border=\"0\" hspace=\"0\" vspace=\"0\" alt=\"Hackers and Painters\" /><br /><br /><font size=\"2\" face=\"verdana\">May 2003<br /><br /><i>(This essay is derived from a guest lecture at Harvard, which incorporated\nan earlier talk at Northeastern.)</i><br /><br />When I finished grad school in computer science I went\nto art school to study painting.  A lot of people seemed surprised\nthat someone interested in computers would also be interested in painting.\nThey seemed to think that\nhacking and painting were very different kinds of work-- that\nhacking was cold, precise, and methodical, and that\npainting was the frenzied expression of some primal urge.<br /><br />Both of these images are wrong.  Hacking and painting have a\nlot in common.  In fact, of all the different types of people I've\nknown, hackers and painters are among the most alike.<br /><br />What hackers and painters have in common is that they're\nboth makers.  Along with composers, architects, and writers,\nwhat hackers and painters are trying to do is make good things.\nThey're not doing research per se, though if in the course of\ntrying to make good things they discover some new technique,\nso much the better.<br /><br /><br /><br />I've never liked the term \"computer science.\"  The main\nreason I don't like it is that there's no such thing.\nComputer science is a\ngrab bag of tenuously related areas thrown together\nby an accident of history, like Yugoslavia.\nAt one end you have people who are really mathematicians,\nbut call what they're doing computer science so they can get DARPA grants.\nIn the middle you have people working on\nsomething like the natural history of computers-- studying the\nbehavior of algorithms for routing data through\nnetworks, for example.  And then at the other extreme you\nhave the hackers, who are trying to\nwrite interesting software, and for whom computers are just a\nmedium of expression, as concrete is for architects or\npaint for painters.  It's as if\nmathematicians, physicists, and architects all had to be in\nthe same department.<br /><br />Sometimes what the hackers do is called \"software engineering,\"\nbut this term is just as misleading.\nGood software designers are no more engineers than architects are.\nThe border between architecture and engineering is not sharply\ndefined, but it's there.\nIt falls between what and how: architects decide what to do,\nand engineers figure out how to do it.<br /><br />What and how should not be kept too separate.  You're\nasking for trouble if you try to decide what to do without\nunderstanding how to do it.\nBut hacking can certainly be more than just deciding how to\nimplement some spec.  At its best, it's creating the spec-- though\nit turns out the best way to do that is to implement it.<br /><br /><br /><br />Perhaps one day\n\"computer science\" will, like Yugoslavia, get broken up into its\ncomponent parts.  That might be a good thing.  Especially if it\nmeant independence for my native land, hacking.<br /><br />Bundling all these different types of work together in one\ndepartment may be convenient administratively, but it's confusing\nintellectually. That's the other reason I don't like the name\n\"computer science.\"  Arguably the people in the middle are doing\nsomething like an experimental science.  But the people at either\nend, the hackers and the mathematicians, are not actually doing science.<br /><br />The mathematicians don't seem bothered by this.  They happily\nset to work proving theorems like the other mathematicians\nover in the math department, and probably soon stop noticing\nthat the building they work in says ``computer science'' on the\noutside.  But for the hackers this label is a problem.\nIf what they're doing is called science, it makes them feel they\nought to be acting scientific.\nSo instead of doing what they really want to do, which is   \nto design beautiful software, hackers in universities and\nresearch labs feel they ought to be writing research papers.<br /><br />In the best case, the papers are just a formality.  Hackers write\ncool software, and then write a paper about it, and the paper\nbecomes a proxy for the achievement represented by the software.\nBut often this mismatch causes problems.  It's easy to\ndrift away from building beautiful things toward building ugly\nthings that make more suitable subjects for research papers.<br /><br />Unfortunately, beautiful things don't always make the\nbest subjects for papers.\nNumber one, research must be original-- and\nas anyone who has written a PhD dissertation knows, the way to\nbe sure that you're exploring virgin territory is to to stake\nout a piece of ground that no one wants.  Number two, research must be\nsubstantial-- and awkward systems yield meatier papers,\nbecause you can write about the obstacles you have to overcome\nin order to get things done.  Nothing yields meaty problems like\nstarting with the wrong assumptions.  Most of AI is an example\nof this rule; if you assume that knowledge can be represented\nas a list of predicate logic expressions whose arguments represent\nabstract concepts, you'll have a lot of\npapers to write about how to make this work.  As Ricky Ricardo\nused to say, \"Lucy, you got a lot of explaining to do.\"<br /><br />The way to create something beautiful is often to make subtle\ntweaks to something that already exists, or to combine existing\nideas in a slightly new way.  This kind of work is hard to\nconvey in a research paper.<br /><br /><br /><br />So why do universities and research labs continue to judge\nhackers by publications?\nFor the same reason that \"scholastic aptitude\"\ngets measured by simple-minded standardized tests, or\nthe productivity of programmers gets measured in lines of code.\nThese tests\nare easy to apply, and there is nothing so tempting as an easy test\nthat kind of works.<br /><br />Measuring what hackers are actually trying to do, designing\nbeautiful software, would be much more difficult.  You need\na good <a href=\"taste.html\">sense of design</a> to judge \ngood design</a>.  And\nthere is no correlation, except possibly\na <a href=\"http://www.apa.org/journals/features/psp7761121.pdf\">negative</a> \none, between people's ability to recognize good\ndesign and their confidence that they can.<br /><br />The only external test is time.  Over time, beautiful\nthings tend to thrive, and ugly\nthings tend to get discarded.  Unfortunately, the amounts of time\ninvolved can be longer than human lifetimes.  Samuel Johnson\nsaid it took a hundred years for a writer's reputation to\nconverge.  You have to wait for the writer's\ninfluential friends to die, and then for all their followers\nto die.<br /><br />I think hackers just have to resign themselves to having a large random\ncomponent in their reputations.  In this they are no different\nfrom other makers.  In fact, they're lucky by comparison.   \nThe influence of fashion is not nearly so great in hacking as it\nis in painting.<br /><br /><br /><br />There are worse things than having people misunderstand your\nwork.  A worse danger is that you\nwill yourself misunderstand your work.  Related fields are\nwhere you go looking for ideas.  If you find yourself in the computer science\ndepartment, there is a natural temptation to believe, for example,\nthat hacking is the applied version of what theoretical computer\nscience is the theory of.   All\nthe time I was in graduate school I had an uncomfortable feeling\nin the back of my mind that I ought to know more theory,\nand that it was very remiss of me to have forgotten all that\nstuff within three weeks of the final exam.<br /><br />Now I realize I was\nmistaken.  Hackers need to understand the theory of computation\nabout as much as painters need to understand paint chemistry.\nYou need to know how to calculate time and\nspace complexity and about\nTuring completeness.  You might also want to remember at\nleast the concept of a state machine, in case you have to write\na parser or a regular expression library.  Painters in fact   \nhave to remember a good deal more about paint chemistry than \nthat.<br /><br />I've found that the best sources of ideas\nare not the other fields that have the word \"computer\" in\ntheir names, but the other fields inhabited by makers.\nPainting has been a much richer source of ideas than the\ntheory of computation.<br /><br />For example, I was taught in college\nthat one ought to figure out a program\ncompletely on paper\nbefore even going near a computer.  I found that I did not\nprogram this way.  I found that I liked to program\nsitting in front of a computer, not a piece of paper.  Worse\nstill, instead of patiently writing out a complete program\nand assuring myself it was correct, I tended to just spew\nout code that was hopelessly broken, and gradually beat it into\nshape.  Debugging, I was taught, was a kind of final pass where\nyou caught typos and oversights.  The way I worked, it\nseemed like programming consisted of debugging.<br /><br />For a long time I felt bad about this, just as I once\nfelt bad that I didn't hold my pencil the way they taught me\nto in elementary school.\nIf I had only looked over at\nthe other makers, the painters or the architects, I would\nhave realized that there was a name for what I was doing:\nsketching.  As far as I can tell, the\nway they taught me to program in college was all wrong.\nYou should figure out programs as you're writing them,\njust as writers and painters and architects do.<br /><br />Realizing this has real implications for software design.\nIt means that a programming language should, above all, be\nmalleable.  A programming language is for \n<a href=\"piraha.html\">thinking</a> of\nprograms, not for expressing programs you've already thought\nof.  It should be a pencil, not a pen.  Static typing would\nbe a fine idea if people actually did write programs the way\nthey taught me to in college.  But that's not how any of the  \nhackers I know write programs.  We need a language that lets us\nscribble and smudge and smear, not a language where you have\nto sit with a teacup of types balanced on your knee and make\npolite conversation with a strict old aunt of a compiler.<br /><br /><br /><br />While we're on the subject of static typing, identifying with\nthe makers will save us from another problem that afflicts\nthe sciences: math envy.  Everyone in the sciences\nsecretly believes that mathematicians are smarter than they are.  \nI think mathematicians also believe this.  At any rate,\nthe result is that scientists tend to make their\nwork look as mathematical as possible.  In a field like\nphysics this probably doesn't do much harm, but the further you\nget from the natural sciences, the more of a problem it\nbecomes.<br /><br />A page of formulas just looks so impressive.\n(Tip: for extra impressiveness, use Greek variables.)  And\nso there is a great temptation to work on problems you\ncan treat formally, rather than problems that are, say,\nimportant.<br /><br />If hackers identified with other makers, like writers and\npainters, they wouldn't feel tempted to do      \nthis.  Writers and painters don't suffer from math envy.\nThey feel as if they're doing something completely unrelated.\nSo are hackers, I think.<br /><br /><br /><br />If universities and research labs keep hackers from doing\nthe kind of work they want to do,\nperhaps the place for them is in companies.\nUnfortunately, most companies won't let hackers do what they\nwant either.  Universities and research labs force hackers\nto be scientists, and companies force them to be engineers.<br /><br />I only discovered this myself quite recently.  When Yahoo bought\nViaweb, they asked me what I wanted to do.  I had never\nliked the business side very much, and said that I just wanted to\nhack.  When I got to Yahoo, I found that what hacking meant\nto them was implementing software, not designing it.  Programmers\nwere seen as technicians who translated the visions (if\nthat is the word) of product managers into code.<br /><br />This seems to be the\ndefault plan in big companies.  They do it because\nit decreases the standard deviation of the outcome.\nOnly a small percentage of hackers can actually design software,\nand it's hard for the\npeople running a company to pick these out.  So instead of\nentrusting the future of the software to\none brilliant hacker, most companies set things up so that it is\ndesigned by committee, and the hackers merely\nimplement the design.<br /><br />If you want to make money at some point, remember this,\nbecause this is one of the reasons startups win.  Big companies want\nto decrease the standard deviation of design outcomes because they\nwant to avoid disasters.  But when you damp oscillations, you\nlose the high points as well as the low.  This is not a problem for\nbig companies, because they don't win by making great\nproducts.  Big companies win by sucking less than other big companies.<br /><br />So if you can figure out a way to get in a\ndesign war with a company big enough that its software is   \ndesigned by product managers, they'll never be able to keep up\nwith you.  These opportunities are not easy to find, though.\nIt's hard to engage a big company in a design war,\njust as it's hard to engage an opponent inside a castle in hand\nto hand combat.  It would be pretty easy to write a better\nword processor than Microsoft Word, for example, but Microsoft,\nwithin the castle of their operating system monopoly,\nprobably wouldn't even notice if you did.<br /><br />The place to fight design wars is in new markets, where no one\nhas yet managed to establish any fortifications.  That's where\nyou can win big by taking the bold approach to design, and\nhaving the same people both design and implement the product.  \nMicrosoft themselves did this at the start.  So did Apple.\nAnd Hewlett-Packard.  I suspect almost every successful startup\nhas.<br /><br /><br /><br />So one way to build great software is to start your own\nstartup.  There are two problems with this, though.  One is\nthat in a startup you have to do so much besides write software.\nAt Viaweb I considered myself lucky if I\ngot to hack a quarter of the time.  And the things I had to   \ndo the other three quarters of the time ranged from tedious\nto terrifying.  I have a benchmark for this, because I\nonce had to leave a board meeting to have\nsome cavities filled.  I remember sitting back in the\ndentist's chair, waiting for the drill, and feeling like\nI was on vacation.<br /><br />The other problem with startups is that there is not much\noverlap between the kind of software that makes money and the\nkind that's interesting to write.  Programming languages\nare interesting to write, and Microsoft's first product was\none, in fact, but no one will pay for programming languages\nnow.  If you want to make money, you tend to be forced to work\non problems that are too nasty for anyone to solve for free.<br /><br />All makers face this problem.  Prices are\ndetermined by supply and demand, and there is just not as much\ndemand for things that are fun to work on as there is for\nthings that solve the mundane problems of individual customers.\nActing in off-Broadway plays just doesn't pay as well as\nwearing a gorilla suit in someone's booth at a\ntrade show.  Writing novels doesn't pay as well as writing\nad copy for garbage disposals.\nAnd hacking programming languages doesn't pay as well\nas figuring out how to connect some company's\nlegacy database to their Web server.<br /><br /><br /><br />I think the answer to this problem, in the case of software,\nis a concept known to nearly all makers: the day job.\nThis phrase began with musicians, who\nperform at night.  More generally, it means that you have one\nkind of work you do for money, and another for love.<br /><br />Nearly all makers have day jobs early in their careers.\nPainters and writers notoriously do.  If you're lucky\nyou can get a day job that's closely\nrelated to your real work.  Musicians often\nseem to work in record stores.  A hacker working on some\nprogramming language or operating system might likewise be able to\nget a day job using it.  [1]<br /><br />When I say that the answer is for hackers to have day jobs, \nand work on beautiful software on the side, I'm not proposing\nthis as a new idea.  This is what open-source hacking is all   \nabout.  What I'm saying is that open-source is probably the right\nmodel, because it has been independently confirmed by all the  \nother makers.<br /><br />It seems surprising to me that any employer would be reluctant\nto let hackers work on open-source projects.\nAt Viaweb, we would have been reluctant to hire anyone\nwho didn't.  When we interviewed\nprogrammers, the main\nthing we cared about was what kind of software they\nwrote in their spare time.\nYou can't do anything really well unless\nyou love it, and if you love to hack you'll inevitably\nbe working on projects of your own. [2]<br /><br /><br /><br />Because hackers are makers rather than scientists,\nthe right place to look for metaphors is not in the\nsciences, but among other kinds of makers.  What else can painting\nteach us about hacking?<br /><br />One thing we can learn, or at least confirm, from the\nexample of painting is how to learn to hack.  You learn to\npaint mostly by doing it.\nDitto for hacking.  Most hackers don't learn to hack by\ntaking college courses in programming.  They learn to hack\nby writing programs of their own at age thirteen.  Even in   \ncollege classes, you learn to hack mostly by hacking. [3]<br /><br />Because painters leave a trail of work behind them, you\ncan watch them learn by doing.  If you look at the work\nof a painter in chronological order, you'll find that each  \npainting builds on things that have been learned in previous\nones.  When there's something in\na painting that works very well, you can usually find version \n1 of it in a smaller form in some earlier painting.<br /><br />I think most makers work this way.  Writers and architects seem\nto as well.  Maybe it would be good for hackers\nto act more like painters, and regularly start over from scratch,\ninstead of continuing to work for years on one project, and\ntrying to incorporate all their later ideas as revisions.<br /><br />The fact that hackers learn to hack by doing it is another\nsign of how different hacking is from the sciences.  Scientists\ndon't learn science by doing it, but by doing labs and problem sets.\nScientists start out doing work that's perfect, in the sense\nthat they're just trying to reproduce work someone else has \nalready done for them.\nEventually, they get\nto the point where they can do original work.\nWhereas hackers, from the start, are doing original work; it's\njust very bad.  So hackers start original, and get good, and\nscientists start good, and get original.<br /><br /><br /><br />\nThe other way makers learn is from examples.\nFor a painter, a museum is a reference library of techniques.\nFor hundreds of years it has been part of the traditional\neducation of painters to copy the works of the great masters,\nbecause copying forces you to look closely\nat the way a painting is made.<br /><br />Writers do this too.\nBenjamin Franklin learned to write by summarizing the points   \nin the essays of Addison and Steele and then trying to\nreproduce them.  Raymond Chandler did the same thing\nwith detective stories.<br /><br />Hackers, likewise, can learn to program by looking at \ngood programs-- not just at what they do, but the source\ncode too.  One of the less publicized benefits\nof the open-source movement is that it has made it easier\nto learn to program.  When I learned to program, we had to rely\nmostly on examples in books.  The one big chunk of\ncode available then was Unix, but even this was not   \nopen source.  Most of the people who read the source\nread it in illicit photocopies of John Lions' book, which\nthough written in 1977 was not allowed to be published\nuntil 1996.<br /><br /><br /><br />Another example we can take from painting is the way that\npaintings are created by gradual refinement.  Paintings usually\nbegin with a sketch.\nGradually the details get filled in.\nBut it is not merely a process of filling in. Sometimes   \nthe original plans turn out to be mistaken.\nCountless paintings,\nwhen you look at them in xrays, turn out to have limbs that\nhave been moved or facial features that have been readjusted.<br /><br />Here's a case where we can learn from painting.  I think hacking\nshould work this way too.  It's unrealistic\nto expect that the specifications for a program will be\nperfect. You're\nbetter off if you admit this up front, and write programs in\na way that allows specifications to change on the fly.<br /><br />(The structure of large companies makes this hard for them\nto do, so here is another place where startups have an advantage.)<br /><br />Everyone by now presumably knows about the danger of premature\noptimization.  I think we should be just as worried about\npremature design-- deciding too early what\na program should do.<br /><br />The right tools can help us avoid\nthis danger.\nA good programming language should, like oil paint, make it\neasy to change your mind.  Dynamic typing is a win here because\nyou don't have to\ncommit to specific data representations up front.\nBut the key to flexibility, I think, is to make the language\nvery <a href=\"power.html\">abstract</a>.\nThe easiest program to change is one that's very short.<br /><br /><br /><br />\nThis sounds like a paradox, but a great painting\nhas to be better than it has to be.\nFor example, when Leonardo\npainted the portrait of <a href=\"ginevra.html\">Ginevra de Benci</a>\nin the National Gallery, he put a juniper bush behind her head.\nIn it he carefully\npainted each individual leaf.  Many painters might have thought,\nthis is just something to put in the background to frame\nher head.  No one will look that closely at it.<br /><br />Not Leonardo.  How hard he worked on part of a painting didn't\ndepend at all on how closely he expected anyone to look at it.\nHe was like Michael Jordan.  Relentless.<br /><br />Relentlessness wins because, in the aggregate, unseen details\nbecome visible.\nWhen people walk by the portrait of Ginevra de Benci,\ntheir attention is often immediately arrested by it,\neven before they look at the label and notice that it says\nLeonardo da Vinci.  All those unseen details combine to produce\nsomething that's just stunning, like a thousand barely audible\nvoices all singing in tune.<br /><br />Great software, likewise, requires a fanatical devotion to\nbeauty.  If you look inside good software, you find that\nparts no one is ever supposed to see are beautiful too.\nI'm not claiming I write great software, but I\nknow that when it comes to code I behave in a way that would\nmake me eligible for prescription drugs if I approached everyday\nlife the same way.\nIt drives me crazy to see code that's badly indented,\nor that uses ugly variable names.<br /><br /><br /><br />If a hacker were a mere implementor, turning a spec into code, then\nhe could just work his way through it from one end to the other like\nsomeone digging a ditch.  But if the hacker is a creator, we have\nto take inspiration into account.<br /><br />In hacking, like painting,\nwork comes in cycles.  Sometimes you get excited about some\nnew project and you want to work sixteen hours a day on it. \nOther times nothing seems interesting.<br /><br />To do good work you have to take these cycles into\naccount, because they're affected by how you react to them.\nWhen you're driving a\ncar with a manual transmission on a hill, you have to back off\nthe clutch sometimes to avoid stalling.  Backing\noff can likewise prevent ambition from stalling.\nIn both painting and hacking there are some\ntasks that are terrifyingly ambitious, and others that are\ncomfortingly routine.  It's a good idea to save some easy\ntasks for moments when you would otherwise stall.<br /><br />In hacking, this can literally mean saving up bugs.\nI like debugging: it's the\none time that hacking is as straightforward as   \npeople think it is.  You have a\ntotally constrained problem, and all you have to do is solve\nit.  Your program is supposed to do x.  Instead it does y.\nWhere does it go wrong? You know you're going to win\nin the end.  It's as relaxing as painting a wall.<br /><br /><br /><br />The example of painting can teach us not only how to manage our\nown work, but how to work together.  A lot of the\ngreat art of the past is the work of multiple hands, though\nthere may only be one name on the wall next to it in the\nmuseum.  Leonardo was an apprentice in the workshop of\nVerrocchio and painted one of the angels in his <a href=\"baptism.html\">Baptism of\nChrist</a>.  This sort of thing was the rule, not the exception.\nMichelangelo was considered especially dedicated for insisting\non painting all the figures on the ceiling of the Sistine\nChapel himself.<br /><br />As far as I know, when painters worked together on a painting,\nthey never worked on the same parts.  It was common\nfor the master to paint the principal figures and for assistants\nto paint the others and the background.  But you never had\none guy painting over the work of another.<br /><br />I think this is the right model for collaboration in software\ntoo.  Don't push it too far.  When a piece of code is\nbeing hacked by three or four different people, no one of whom\nreally owns it, it will end up being like a common-room.  It will\ntend to feel bleak and abandoned, and accumulate cruft.\nThe right\nway to collaborate, I think, is to divide projects into sharply\ndefined modules, each with a definite owner, and with interfaces\nbetween them that are as carefully designed and, if possible,\nas articulated as programming languages.<br /><br /><br /><br />Like painting, most software is intended for\na human audience.  And so hackers, like painters, must have\nempathy to do really great work.  You have to be able to see\nthings from the user's point of view.<br /><br />When I was a kid I was always being told to look at things from\nsomeone else's point of view.  What this always meant in\npractice was to do what someone else wanted, instead of what\nI wanted.  This of course gave empathy a bad name, and I made a\npoint of not cultivating it.<br /><br />Boy, was I wrong.  It turns out that looking at things from \nother people's point of view is practically the secret of\nsuccess.  It doesn't necessarily mean being self-sacrificing.\nFar from it.  Understanding how someone else sees things\ndoesn't imply that you'll act in his interest; in some\nsituations-- in war, for example-- you want to do exactly\nthe opposite. [4]<br /><br />Most makers make things for a human audience.\nAnd to engage an audience you have to understand what they need.\nNearly all the greatest paintings are paintings of people,\nfor example, because people are what people are interested in.<br /><br />Empathy is probably the single most important difference\nbetween a good hacker and a great one.  Some hackers\nare quite smart, but when it comes to empathy are\npractically solipsists.  It's hard for such      \npeople to design great software [5], because they can't\nsee things from the user's point of view.<br /><br />One way to tell how good people are at empathy is to watch\nthem explain a technical question to someone without a technical\nbackground.  We probably all know people who, though otherwise smart,\nare just comically bad at this.  If someone asks them at\na dinner party what a programming language is, they'll\nsay something like ``Oh, a high-level language is what\nthe compiler uses as input to generate object code.''\nHigh-level language?  Compiler?  Object code?  Someone who \ndoesn't know what a programming language is obviously doesn't\nknow what these things are, either.<br /><br />Part of what software has to do is explain itself.  So to   \nwrite good software you have to understand how little users   \nunderstand.\nThey're going to walk up to the software with no preparation, and\nit had better do what they guess it will, because they're\nnot going to read the manual.  The best system I've ever seen \nin this respect was the original Macintosh, in 1985.\nIt did what software almost never does: it just worked. [6]<br /><br />Source code, too, should explain itself.  If I could get people to\nremember just one quote about programming, it would be the\none at the beginning of <i>Structure and Interpretation of Computer\nPrograms.</i>  \n<blockquote>\nPrograms should be written for people to read, and\nonly incidentally for machines to execute.\n</blockquote>\nYou need to have \nempathy not just for your users, but for your readers.  It's in  \nyour interest, because you'll be one of them.\nMany a hacker has written a program only to\nfind on returning to it six months later that he has no idea   \nhow it works.  I know several people who've sworn off Perl after\nsuch experiences. [7]<br /><br />Lack of empathy is associated with intelligence, to the point\nthat there is even something of a fashion for it in some places.\nBut I don't think there's any correlation.\nYou can do well in math and\nthe natural sciences without having to learn empathy, and people in these\nfields tend to be smart, so the two qualities have come to be\nassociated.  But there are plenty of dumb people who are bad at\nempathy too.  Just listen to the people who call in with questions on\ntalk shows.  They ask whatever it is they're asking in\nsuch a roundabout way\nthat the hosts often have to rephrase the question for them.<br /><br /><br /><br />So, if hacking works like painting and writing, is it as cool?\nAfter all, you only get one life.\nYou might as well spend it working on something great.<br /><br />Unfortunately, the question is hard to answer.  There is always\na big time lag in prestige.  It's like light from a distant star.\nPainting has prestige now because of great work people did five hundred\nyears ago.  At the time, no one thought\nthese paintings were as important as we do today.  It would have\nseemed very odd to people at the time that Federico da Montefeltro,\nthe Duke of Urbino, would one day be known mostly as the guy\nwith the strange nose in a <a href=\"montefeltro.html\">painting</a> \nby Piero della Francesca.<br /><br />So while I admit that hacking doesn't seem as cool as painting now,\nwe should remember that painting itself didn't seem as cool in\nits glory days as it does now.<br /><br />What we can say with some confidence is that these are the glory\ndays of hacking.  In most fields the great work is done early on.\nThe paintings made between 1430 and 1500 are still unsurpassed.\nShakespeare appeared just as professional theater was being born,\n<!-- plays were emerging from crude farces put\non in the courtyards of coaching inns, -->\nand pushed the medium\nso far that every playwright since has had to live in his shadow.\nAlbrecht Durer did the same thing with engraving, and Jane Austen\nwith the novel.<br /><br />Over and over we see the same pattern.  A new medium appears, and\npeople are so excited about it that they explore most of its\npossibilities in the first couple generations.   Hacking seems\nto be in this phase now.<br /><br />Painting was not, in Leonardo's time, as cool as his work\nhelped make it.\nHow cool hacking turns out to be will depend on what we can\ndo with this new medium.  \n<!--In some ways, the time lag of\ncoolness is an advantage.  When you meet someone now who is\nwriting a compiler or hacking a Unix kernel, at least\nyou know they're not just doing it to pick up chicks.--><br /><br /><br /><br /><br>\n<b>Notes</b><br /><br />[1] The greatest damage that photography has done\nto painting may be the fact that it killed the best day job.\nMost of the great painters in history supported\nthemselves by painting portraits.  <!-- Until about 1870, there\nwas always a cadre of painters trained in the most\ndifficult task in art, painting the human face from life.  --><br /><br />[2] I've been told that Microsoft discourages\nemployees from contributing to open-source projects, even in\ntheir spare time.\nBut so many of the best hackers work on open-source\nprojects now that the main effect of this policy may be\nto ensure that they won't be able to hire any first-rate\nprogrammers.<br /><br />[3] What you learn about programming in college is much like\nwhat you learn about books or clothes or dating: what bad taste you\nhad in high school.<br /><br />[4] Here's an example of applied empathy.\nAt Viaweb, if we couldn't decide between two alternatives, we'd\nask, what would our competitors hate most?  At one point a\ncompetitor added a feature to their software that was basically\nuseless, but since it was one of few they had that we didn't, they\nmade much of it in the trade press.\nWe could have tried to explain that the feature was useless,\nbut we decided it would annoy our competitor more if we\njust implemented it ourselves, so we hacked together our own\nversion that afternoon.<br /><br />[5] Except text editors and compilers.  Hackers don't need empathy to\ndesign these, because they are themselves typical users.<br /><br />[6] Well, almost.  They overshot the available RAM somewhat,\ncausing much inconvenient disk swapping, but this could be fixed\nwithin a few months by buying an additional disk drive.<br /><br />[7] The way to make programs easy to read is not to\nstuff them with comments. I would take Abelson and Sussman's\nquote a step further.  Programming languages should be designed\nto express algorithms, and only incidentally to tell computers\nhow to execute them.  A good programming language\nought to be better for explaining software than English.\nYou should only\nneed comments when there is some kind of kludge you need to warn\nreaders about, just as on a road there are only\narrows on parts with unexpectedly sharp curves.\n<!-- [8] Leonardo was paid\nthe same amount for painting the Virgin of the Rocks as the workshop\nthat made the frame for it. --><br /><br /><b>Thanks</b> to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa\nRandall for reading drafts of this, and to Henry Leitner\nand Larry Finkelstein for inviting me to speak.<br /><br /></font></td></tr></table><br /><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"435\"><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"5\" width=\"1\" border=\"0\" /></td></tr><tr valign=\"top\"><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://www.shiro.dreamhost.com/scheme/trans/hp-j.html\">Japanese Translation</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://kapcoweb.com/p/hackers-y-pintores\">Spanish Translation</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"3\" width=\"1\" border=\"0\" /></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"5\" width=\"1\" border=\"0\" /></td></tr><tr valign=\"top\"><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://www.langatigma.org/trans/hm.html\">German Translation</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://www.sounerd.com.br/index.php?option=com_content&amp;task=view&amp;id=203&amp;Itemid=43\">Portuguese Translation</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"3\" width=\"1\" border=\"0\" /></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"5\" width=\"1\" border=\"0\" /></td></tr><tr valign=\"top\"><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://blog.zvestov.cz/item/135\">Czech Translation</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"http://www.uiweb.com/issues/issue08.htm\">Why Good Design Comes from Bad Design</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"3\" width=\"1\" border=\"0\" /></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"5\" width=\"1\" border=\"0\" /></td></tr><tr valign=\"top\"><td width=\"6\"><center><img src=\"https://s.turbifycdn.com/aah/paulgraham/serious-2.gif\" width=\"6\" height=\"14\" border=\"0\" hspace=\"0\" vspace=\"0\" /></center></td><td width=\"8\"><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"1\" width=\"8\" border=\"0\" /></td><td width=\"196\"><font size=\"2\" face=\"verdana\"><a href=\"knuth.html\">Knuth: Computer Programming as an Art</a><br /><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"2\" width=\"1\" border=\"0\" /><br /></font></td></tr><tr><td><img src=\"https://sep.turbifycdn.com/ca/Img/trans_1x1.gif\" height=\"3\" width=\"1\" border=\"0\" /></td></tr></table><br /><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"435\"><tr><td><font size=\"2\" face=\"verdana\"><br><br><hr>\n<table width=100% cellpadding=0 cellspacing=0>\n<tr><td bgcolor=#ffe799><img src=\"http://www.virtumundo.com/images/spacer.gif\"\nheight=15 width=1><font size=2>\nYou'll find this essay and 14 others in\n<a href=\"http://www.amazon.com/gp/product/0596006624\"><b><i>Hackers & Painters</i></b></a>.</font>\n<br><img src=\"http://www.virtumundo.com/images/spacer.gif\" height=5 width=1></td\n><tr>\n</table></font></td></tr></table></td></tr></table></body>\n<script type=\"text/javascript\">\ncsell_env = 'ue1';\n var storeCheckoutDomain = 'order.store.turbify.net';\n</script>\n\n<script type=\"text/javascript\">\n  function toOSTN(node){\n    if(node.hasAttributes()){\n      for (const attr of node.attributes) {\n        node.setAttribute(attr.name,attr.value.replace(/(us-dc1-order|us-dc2-order|order)\\.(store|stores)\\.([a-z0-9-]+)\\.(net|com)/g, storeCheckoutDomain));\n      }\n    }\n  };\n  document.addEventListener('readystatechange', event => {\n  if(typeof storeCheckoutDomain != 'undefined' && storeCheckoutDomain != \"order.store.turbify.net\"){\n    if (event.target.readyState === \"interactive\") {\n      fromOSYN = document.getElementsByTagName('form');\n        for (let i = 0; i < fromOSYN.length; i++) {\n          toOSTN(fromOSYN[i]);\n        }\n      }\n    }\n  });\n</script>\n<script type=\"text/javascript\">\n// Begin Store Generated Code\n </script> <script type=\"text/javascript\" src=\"https://s.turbifycdn.com/lq/ult/ylc_1.9.js\" ></script> <script type=\"text/javascript\" src=\"https://s.turbifycdn.com/ae/lib/smbiz/store/csell/beacon-a9518fc6e4.js\" >\n</script>\n<script type=\"text/javascript\">\n// Begin Store Generated Code\n csell_page_data = {}; csell_page_rec_data = []; ts='TOK_STORE_ID';\n</script>\n<script type=\"text/javascript\">\n// Begin Store Generated Code\nfunction csell_GLOBAL_INIT_TAG() { var csell_token_map = {}; csell_token_map['TOK_SPACEID'] = '2022276099'; csell_token_map['TOK_URL'] = ''; csell_token_map['TOK_BEACON_TYPE'] = 'prod'; csell_token_map['TOK_IS_ORDERABLE'] = '2'; csell_token_map['TOK_RAND_KEY'] = 't'; csell_token_map['TOK_STORE_ID'] = 'paulgraham'; csell_token_map['TOK_ITEM_ID_LIST'] = 'hp'; csell_token_map['TOK_ORDER_HOST'] = 'order.store.turbify.net';  c = csell_page_data; var x = (typeof storeCheckoutDomain == 'string')?storeCheckoutDomain:'order.store.turbify.net'; var t = csell_token_map; c['s'] = t['TOK_SPACEID']; c['url'] = t['TOK_URL']; c['si'] = t[ts]; c['ii'] = t['TOK_ITEM_ID_LIST']; c['bt'] = t['TOK_BEACON_TYPE']; c['rnd'] = t['TOK_RAND_KEY']; c['io'] = t['TOK_IS_ORDERABLE']; YStore.addItemUrl = 'http%s://'+x+'/'+t[ts]+'/ymix/MetaController.html?eventName.addEvent&cartDS.shoppingcart_ROW0_m_orderItemVector_ROW0_m_itemId=%s&cartDS.shoppingcart_ROW0_m_orderItemVector_ROW0_m_quantity=1&ysco_key_cs_item=1&sectionId=ysco.cart&ysco_key_store_id='+t[ts]; } \n</script>\n<script type=\"text/javascript\">\n// Begin Store Generated Code\nfunction csell_REC_VIEW_TAG() {  var env = (typeof csell_env == 'string')?csell_env:'prod'; var p = csell_page_data; var a = '/sid='+p['si']+'/io='+p['io']+'/ii='+p['ii']+'/bt='+p['bt']+'-view'+'/en='+env; var r=Math.random(); YStore.CrossSellBeacon.renderBeaconWithRecData(p['url']+'/p/s='+p['s']+'/'+p['rnd']+'='+r+a); } \n</script>\n<script type=\"text/javascript\">\n// Begin Store Generated Code\nvar csell_token_map = {}; csell_token_map['TOK_PAGE'] = 'p'; csell_token_map['TOK_CURR_SYM'] = '$'; csell_token_map['TOK_WS_URL'] = 'https://paulgraham./cs/recommend?itemids=hp&location=p'; csell_token_map['TOK_SHOW_CS_RECS'] = 'false';  var t = csell_token_map; csell_GLOBAL_INIT_TAG(); YStore.page = t['TOK_PAGE']; YStore.currencySymbol = t['TOK_CURR_SYM']; YStore.crossSellUrl = t['TOK_WS_URL']; YStore.showCSRecs = t['TOK_SHOW_CS_RECS']; </script> <script type=\"text/javascript\" src=\"https://s.turbifycdn.com/ae/store/secure/recs-1.3.2.2.js\" ></script> <script type=\"text/javascript\" >\n</script>\n</html>\n<!-- html106.prod.store.e1a.lumsb.com Mon May 13 08:27:43 PDT 2024 -->\n"

  var doc = new JSDOM(blogHtml, {
    url: "https://paulgraham.com/hp.html"
  });
  var article = new Readability(doc.window.document).parse();
  console.log(article)
}

function toMarkdown() {

}

const main = () => {
  // basic()
  complex()
};

// This was just here to force a linting error for now to demonstrate/test the
// eslint pipeline. You can uncomment this and run "yarn check-lint" to test the
// linting.
// const x: number[] = [1, 2];
// const y: Array<number> = [3, 4];

// This was just here to force a linting error for now to demonstrate/test the
// eslint pipeline. You can uncomment this and run "yarn check-lint" to test the
// linting.
// if (x == y) {
//   console.log("equal!");
// }

main();
