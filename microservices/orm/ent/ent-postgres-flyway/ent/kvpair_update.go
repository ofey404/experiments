// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ofey404/experiments/microservices/orm/ent/ent-postgres-flyway/ent/kvpair"
	"github.com/ofey404/experiments/microservices/orm/ent/ent-postgres-flyway/ent/predicate"
)

// KVPairUpdate is the builder for updating KVPair entities.
type KVPairUpdate struct {
	config
	hooks    []Hook
	mutation *KVPairMutation
}

// Where appends a list predicates to the KVPairUpdate builder.
func (kpu *KVPairUpdate) Where(ps ...predicate.KVPair) *KVPairUpdate {
	kpu.mutation.Where(ps...)
	return kpu
}

// Mutation returns the KVPairMutation object of the builder.
func (kpu *KVPairUpdate) Mutation() *KVPairMutation {
	return kpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kpu *KVPairUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, kpu.sqlSave, kpu.mutation, kpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kpu *KVPairUpdate) SaveX(ctx context.Context) int {
	affected, err := kpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kpu *KVPairUpdate) Exec(ctx context.Context) error {
	_, err := kpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpu *KVPairUpdate) ExecX(ctx context.Context) {
	if err := kpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kpu *KVPairUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kvpair.Table, kvpair.Columns, sqlgraph.NewFieldSpec(kvpair.FieldID, field.TypeInt))
	if ps := kpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kvpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kpu.mutation.done = true
	return n, nil
}

// KVPairUpdateOne is the builder for updating a single KVPair entity.
type KVPairUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KVPairMutation
}

// Mutation returns the KVPairMutation object of the builder.
func (kpuo *KVPairUpdateOne) Mutation() *KVPairMutation {
	return kpuo.mutation
}

// Where appends a list predicates to the KVPairUpdate builder.
func (kpuo *KVPairUpdateOne) Where(ps ...predicate.KVPair) *KVPairUpdateOne {
	kpuo.mutation.Where(ps...)
	return kpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kpuo *KVPairUpdateOne) Select(field string, fields ...string) *KVPairUpdateOne {
	kpuo.fields = append([]string{field}, fields...)
	return kpuo
}

// Save executes the query and returns the updated KVPair entity.
func (kpuo *KVPairUpdateOne) Save(ctx context.Context) (*KVPair, error) {
	return withHooks(ctx, kpuo.sqlSave, kpuo.mutation, kpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kpuo *KVPairUpdateOne) SaveX(ctx context.Context) *KVPair {
	node, err := kpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kpuo *KVPairUpdateOne) Exec(ctx context.Context) error {
	_, err := kpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpuo *KVPairUpdateOne) ExecX(ctx context.Context) {
	if err := kpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kpuo *KVPairUpdateOne) sqlSave(ctx context.Context) (_node *KVPair, err error) {
	_spec := sqlgraph.NewUpdateSpec(kvpair.Table, kvpair.Columns, sqlgraph.NewFieldSpec(kvpair.FieldID, field.TypeInt))
	id, ok := kpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KVPair.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kvpair.FieldID)
		for _, f := range fields {
			if !kvpair.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kvpair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &KVPair{config: kpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kvpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kpuo.mutation.done = true
	return _node, nil
}
