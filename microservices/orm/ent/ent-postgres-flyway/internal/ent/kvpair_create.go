// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ofey404/experiments/microservices/orm/ent/ent-postgres-flyway/internal/ent/kvpair"
)

// KVPairCreate is the builder for creating a KVPair entity.
type KVPairCreate struct {
	config
	mutation *KVPairMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (kpc *KVPairCreate) SetKey(s string) *KVPairCreate {
	kpc.mutation.SetKey(s)
	return kpc
}

// SetValue sets the "value" field.
func (kpc *KVPairCreate) SetValue(s string) *KVPairCreate {
	kpc.mutation.SetValue(s)
	return kpc
}

// Mutation returns the KVPairMutation object of the builder.
func (kpc *KVPairCreate) Mutation() *KVPairMutation {
	return kpc.mutation
}

// Save creates the KVPair in the database.
func (kpc *KVPairCreate) Save(ctx context.Context) (*KVPair, error) {
	return withHooks(ctx, kpc.sqlSave, kpc.mutation, kpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kpc *KVPairCreate) SaveX(ctx context.Context) *KVPair {
	v, err := kpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kpc *KVPairCreate) Exec(ctx context.Context) error {
	_, err := kpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpc *KVPairCreate) ExecX(ctx context.Context) {
	if err := kpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kpc *KVPairCreate) check() error {
	if _, ok := kpc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "KVPair.key"`)}
	}
	if _, ok := kpc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "KVPair.value"`)}
	}
	return nil
}

func (kpc *KVPairCreate) sqlSave(ctx context.Context) (*KVPair, error) {
	if err := kpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	kpc.mutation.id = &_node.ID
	kpc.mutation.done = true
	return _node, nil
}

func (kpc *KVPairCreate) createSpec() (*KVPair, *sqlgraph.CreateSpec) {
	var (
		_node = &KVPair{config: kpc.config}
		_spec = sqlgraph.NewCreateSpec(kvpair.Table, sqlgraph.NewFieldSpec(kvpair.FieldID, field.TypeInt))
	)
	if value, ok := kpc.mutation.Key(); ok {
		_spec.SetField(kvpair.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := kpc.mutation.Value(); ok {
		_spec.SetField(kvpair.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	return _node, _spec
}

// KVPairCreateBulk is the builder for creating many KVPair entities in bulk.
type KVPairCreateBulk struct {
	config
	err      error
	builders []*KVPairCreate
}

// Save creates the KVPair entities in the database.
func (kpcb *KVPairCreateBulk) Save(ctx context.Context) ([]*KVPair, error) {
	if kpcb.err != nil {
		return nil, kpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kpcb.builders))
	nodes := make([]*KVPair, len(kpcb.builders))
	mutators := make([]Mutator, len(kpcb.builders))
	for i := range kpcb.builders {
		func(i int, root context.Context) {
			builder := kpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KVPairMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kpcb *KVPairCreateBulk) SaveX(ctx context.Context) []*KVPair {
	v, err := kpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kpcb *KVPairCreateBulk) Exec(ctx context.Context) error {
	_, err := kpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kpcb *KVPairCreateBulk) ExecX(ctx context.Context) {
	if err := kpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
