// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name, birth_date)
VALUES ($1, $2)
RETURNING id, name, birth_date
`

type CreateAuthorParams struct {
	Name      string
	BirthDate sql.NullTime
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.BirthDate)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (title, publication_date, author_id)
VALUES ($1, $2, $3)
RETURNING id, title, publication_date, author_id
`

type CreateBookParams struct {
	Title           string
	PublicationDate sql.NullTime
	AuthorID        int32
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.PublicationDate, arg.AuthorID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}

const getAuthorByID = `-- name: GetAuthorByID :one
SELECT id, name, birth_date FROM authors WHERE id = $1
`

func (q *Queries) GetAuthorByID(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByID, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, name, birth_date
FROM authors
WHERE name = $1
`

func (q *Queries) GetAuthorByName(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByName, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const getAuthorsBornWithin = `-- name: GetAuthorsBornWithin :many
SELECT id, name, birth_date
FROM authors
WHERE birth_date BETWEEN $1 AND $2
`

type GetAuthorsBornWithinParams struct {
	StartTime sql.NullTime
	EndTime   sql.NullTime
}

func (q *Queries) GetAuthorsBornWithin(ctx context.Context, arg GetAuthorsBornWithinParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsBornWithin, arg.StartTime, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.BirthDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, publication_date, author_id FROM books WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}

const getBookByTitle = `-- name: GetBookByTitle :one
SELECT id, title, publication_date, author_id
FROM books
WHERE title = $1
`

func (q *Queries) GetBookByTitle(ctx context.Context, title string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByTitle, title)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublicationDate,
		&i.AuthorID,
	)
	return i, err
}

const getBooksByAuthorName = `-- name: GetBooksByAuthorName :many
SELECT books.id, books.title, books.publication_date, books.author_id
FROM books
         JOIN authors ON books.author_id = authors.id
WHERE authors.name = $1
`

func (q *Queries) GetBooksByAuthorName(ctx context.Context, name string) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthorName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublicationDate,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
