#!/usr/bin/env bash
# set -x             # for debug
set -euo pipefail  # fail early
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

cd "$SCRIPT_DIR"

##############################################
# Don't run. This file is a note for commands.
##############################################

make -C cmake-build-debug/

./cmake-build-debug/asan
# die silently

./cmake-build-debug/asan_debug
# =================================================================
# ==38590==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd68060888 at pc 0x55afada9829b bp 0x7ffd68060820 sp 0x7ffd68060810
# READ of size 4 at 0x7ffd68060888 thread T0
#     #0 0x55afada9829a in main /home/ofey/experiments/language/cpp/cmake/leakage_detector/asan/main.cpp:3
#     #1 0x7fee88e04d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58
#     #2 0x7fee88e04e3f in __libc_start_main_impl ../csu/libc-start.c:392
#     #3 0x55afada98104 in _start (/home/ofey/experiments/language/cpp/cmake/leakage_detector/asan/cmake-build-debug/asan_debug+0x1104)
#
# Address 0x7ffd68060888 is located in stack of thread T0 at offset 88 in frame
#     #0 0x55afada981d8 in main /home/ofey/experiments/language/cpp/cmake/leakage_detector/asan/main.cpp:1
#
#   This frame has 1 object(s):
#     [48, 88) 'array' (line 2) <== Memory access at offset 88 overflows this variable
# HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
#       (longjmp and C++ exceptions *are* supported)
# SUMMARY: AddressSanitizer: stack-buffer-overflow /home/ofey/experiments/language/cpp/cmake/leakage_detector/asan/main.cpp:3 in main
# Shadow bytes around the buggy address:
#   0x10002d0040c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d0040d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d0040e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d0040f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d004100: 00 00 00 00 00 00 f1 f1 f1 f1 f1 f1 00 00 00 00
# =>0x10002d004110: 00[f3]f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00
#   0x10002d004120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d004130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d004140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d004150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
#   0x10002d004160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
# Shadow byte legend (one shadow byte represents 8 application bytes):
#   Addressable:           00
#   Partially addressable: 01 02 03 04 05 06 07
#   Heap left redzone:       fa
#   Freed heap region:       fd
#   Stack left redzone:      f1
#   Stack mid redzone:       f2
#   Stack right redzone:     f3
#   Stack after return:      f5
#   Stack use after scope:   f8
#   Global redzone:          f9
#   Global init order:       f6
#   Poisoned by user:        f7
#   Container overflow:      fc
#   Array cookie:            ac
#   Intra object redzone:    bb
#   ASan internal:           fe
#   Left alloca redzone:     ca
#   Right alloca redzone:    cb
#   Shadow gap:              cc
# ==38590==ABORTING

#####################################################################
# An explaination of the output generated by GPT-4:
#####################################################################
#
# The output you're seeing is a stack-buffer-overflow error reported by
# AddressSanitizer (ASan). This error occurs when a program accesses memory
# beyond the boundaries of a stack-allocated array. In your case, the error is
# occurring because your program is trying to access `array[10]`, but the array
# only has 10 elements, indexed from 0 to 9.
#
# Let's break down the relevant parts of the ASan output:
#
# 1. `==38721==ERROR: AddressSanitizer: stack-buffer-overflow on address
#    0x7ffd772816c8 at pc 0x564d98dde29b bp 0x7ffd77281660 sp 0x7ffd77281650`:
#    This is the main error message. It's saying that there's a
#    stack-buffer-overflow error (an access beyond the end of an array on the
#    stack), and it's giving you the address where the error occurred, along
#    with some other information about the state of the program at the time of
#    the error.
#
# 2. `READ of size 4 at 0x7ffd772816c8 thread T0`: This line tells you that the
#    faulty operation was a read operation of size 4 bytes (which is the size of
#    an `int` on most systems), and that it happened on thread `T0` (the main
#    thread of the program).
#
# 3. `#0 0x564d98dde29a in main
#    /home/ofey/experiments/language/cpp/cmake/leakage_detector/asan/main.cpp:3`:
#    This line is the top of the stack trace, showing you where in your program
#    the error occurred. It's saying that the error occurred in the `main`
#    function, in the file `main.cpp`, at line 3.
#
# 4. `[48, 88) 'array' (line 2) <== Memory access at offset 88 overflows this
#    variable`: This line is telling you that the `array` variable (defined at
#    line 2 of `main.cpp`) occupies the memory region from offset 48 to 88, and
#    that the faulty memory access happened at offset 88, which is just beyond
#    the end of the array. This is the direct cause of the stack-buffer-overflow
#    error.
#
# In summary, the error is occurring because your program is trying to access
# `array[10]`, but `array` only has 10 elements, indexed from 0 to 9. The access
# to `array[10]` is going beyond the end of the array and causing a
# stack-buffer-overflow error.
